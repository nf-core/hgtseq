/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
            enabled: false
        ]

    withName: FASTQC_UNTRIMMED {
        publishDir = [
            path: { "${params.outdir}/QC/fastqc_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: FASTQC_TRIMMED {
        publishDir = [
            path: { "${params.outdir}/QC/fastqc_trimmed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'BWAMEM1_INDEX' {
        ext.when = { !params.bwaindex && params.aligner == "bwa-mem" }
    }

    withName: 'BWAMEM2_INDEX' {
        ext.when = { !params.bwamem2index && params.aligner == "bwa-mem2" }
    }

    withName: BWAMEM1_MEM {
        publishDir = [
            path: { "${params.outdir}/preprocess/alignment" },
            mode: params.publish_dir_mode
        ]
    }

    withName: BWAMEM2_MEM {
        publishDir = [
            path: { "${params.outdir}/preprocess/alignment" },
            mode: params.publish_dir_mode
        ]
    }

    withName: TRIMGALORE {
        publishDir = [
            path: { "${params.outdir}/preprocess/trimming" },
            mode: params.publish_dir_mode
        ]
        ext.args = '--illumina'
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/preprocess/alignment" },
            mode: params.publish_dir_mode
        ]
    }

    withName: SAMTOOLS_SORT {
        publishDir = [
            path: { "${params.outdir}/preprocess/alignment" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_sorted" }
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/preprocess/alignment" },
            mode: params.publish_dir_mode
        ]
    }

    withName: SAMTOOLS_VIEW_SINGLE {
        publishDir = [
            path: { "${params.outdir}/preprocess/exctracted_reads/single_unmapped" },
            mode: params.publish_dir_mode
        ]
        ext.args = '-b -f 5 -F 256'
        ext.args2 = '-b -F 8'
    }

    withName: SAMTOOLS_VIEW_BOTH {
        publishDir = [
            path: { "${params.outdir}/preprocess/exctracted_reads/both_unmapped" },
            mode: params.publish_dir_mode
        ]
        ext.args = '-b -f 13 -F 256'
    }

    withName: SAMTOOLS_FASTQ_SINGLE {
        publishDir = [
            path: { "${params.outdir}/preprocess/converted_reads/single_unmapped" },
            mode: params.publish_dir_mode
        ]
        ext.args = '-n'
    }

    withName: SAMTOOLS_FASTQ_BOTH {
        publishDir = [
            path: { "${params.outdir}/preprocess/converted_reads/both_unmapped" },
            mode: params.publish_dir_mode
        ]
        ext.args = '-n'
    }

    withName: PARSEOUTPUTS {
        publishDir = [
            path: { "${params.outdir}/preprocess/converted_reads/parsed_integration_sites" },
            mode: params.publish_dir_mode
        ]
    }

    withName: KRAKEN2_SINGLE {
        publishDir = [
            path: { "${params.outdir}/results/classified/single_unmapped" },
            mode: params.publish_dir_mode
        ]
    }

    withName: KRAKEN2_BOTH {
        publishDir = [
            path: { "${params.outdir}/results/classified/both_unmapped" },
            mode: params.publish_dir_mode
        ]
    }

    withName: GAWK_SINGLE {
        publishDir = [
            path: { "${params.outdir}/results/classified/collate_kraken/single_unmapped" },
            mode: params.publish_dir_mode
        ]
    }

    withName: GAWK_BOTH {
        publishDir = [
            path: { "${params.outdir}/results/classified/collate_kraken/both_unmapped" },
            mode: params.publish_dir_mode
        ]
    }

    withName: KRONA_KTIMPORTTAXONOMY_SINGLE {
        publishDir = [
            path: { "${params.outdir}/results/kronaplots/single_unmapped" },
            mode: params.publish_dir_mode
        ]
        ext.args = '-t 3'
    }

    withName: KRONA_KTIMPORTTAXONOMY_BOTH {
        publishDir = [
            path: { "${params.outdir}/results/kronaplots/both_unmapped" },
            mode: params.publish_dir_mode
        ]
        ext.args = '-t 3'
    }

    withName: RANALYSIS {
        publishDir = [
            path: { "${params.outdir}/results/analysis_report" },
            mode: params.publish_dir_mode
        ]
    }

    withName: QUALIMAP_BAMQC {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
        publishDir = [
            path: { "${params.outdir}/QC/qualimap" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/QC/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BAMTOOLS_STATS {
        publishDir = [
            path: { "${params.outdir}/QC/bamtools/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
